using System.Security.Cryptography;
using System.Text;

namespace TPAHRSystem.API.Utilities
{
    public static class PasswordDebugger
    {
        public static void DebugPasswordHashing()
        {
            var password = "test123";
            var salt = "testsalt";
            var expectedHash = "r7DPbrmxfQ99IrRW8SElcwElTh8BZlNwR2OD6ndt9BQ=";

            Console.WriteLine("=== PASSWORD HASH DEBUGGING ===");
            Console.WriteLine($"Password: {password}");
            Console.WriteLine($"Salt: {salt}");
            Console.WriteLine($"Expected Hash: {expectedHash}");
            Console.WriteLine();

            // Method 1: Password + Salt (your current method)
            var hash1 = GenerateHash_PasswordPlusSalt(password, salt);
            Console.WriteLine($"Method 1 (password + salt): {hash1}");
            Console.WriteLine($"Matches expected: {hash1 == expectedHash}");
            Console.WriteLine();

            // Method 2: Salt + Password
            var hash2 = GenerateHash_SaltPlusPassword(password, salt);
            Console.WriteLine($"Method 2 (salt + password): {hash2}");
            Console.WriteLine($"Matches expected: {hash2 == expectedHash}");
            Console.WriteLine();

            // Method 3: PBKDF2 (if using base64 salt)
            try
            {
                var hash3 = GenerateHash_PBKDF2_PlainSalt(password, salt);
                Console.WriteLine($"Method 3 (PBKDF2 with plain salt): {hash3}");
                Console.WriteLine($"Matches expected: {hash3 == expectedHash}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Method 3 failed: {ex.Message}");
            }
            Console.WriteLine();

            // Method 4: Different SHA256 approaches
            var hash4 = GenerateHash_SHA256_UTF8(password, salt);
            Console.WriteLine($"Method 4 (SHA256 UTF8): {hash4}");
            Console.WriteLine($"Matches expected: {hash4 == expectedHash}");
            Console.WriteLine();

            // Method 5: Try different encodings
            var hash5 = GenerateHash_SHA256_ASCII(password, salt);
            Console.WriteLine($"Method 5 (SHA256 ASCII): {hash5}");
            Console.WriteLine($"Matches expected: {hash5 == expectedHash}");
            Console.WriteLine();

            // Test if this was generated by the PasswordHasher utility
            var (hash6, generatedSalt) = PasswordHasher.HashPassword(password);
            Console.WriteLine($"Method 6 (PasswordHasher utility): {hash6}");
            Console.WriteLine($"Generated salt: {generatedSalt}");
            Console.WriteLine();

            Console.WriteLine("=== END DEBUGGING ===");
        }

        private static string GenerateHash_PasswordPlusSalt(string password, string salt)
        {
            var combined = password + salt;
            var bytes = Encoding.UTF8.GetBytes(combined);
            using var sha256 = SHA256.Create();
            var hashBytes = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hashBytes);
        }

        private static string GenerateHash_SaltPlusPassword(string password, string salt)
        {
            var combined = salt + password;
            var bytes = Encoding.UTF8.GetBytes(combined);
            using var sha256 = SHA256.Create();
            var hashBytes = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hashBytes);
        }

        private static string GenerateHash_PBKDF2_PlainSalt(string password, string salt)
        {
            var saltBytes = Encoding.UTF8.GetBytes(salt); // Use plain salt as bytes
            using var pbkdf2 = new Rfc2898DeriveBytes(password, saltBytes, 10000, HashAlgorithmName.SHA256);
            return Convert.ToBase64String(pbkdf2.GetBytes(32));
        }

        private static string GenerateHash_SHA256_UTF8(string password, string salt)
        {
            var combined = password + salt;
            var bytes = Encoding.UTF8.GetBytes(combined);
            using var sha256 = SHA256.Create();
            var hashBytes = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hashBytes);
        }

        private static string GenerateHash_SHA256_ASCII(string password, string salt)
        {
            var combined = password + salt;
            var bytes = Encoding.ASCII.GetBytes(combined);
            using var sha256 = SHA256.Create();
            var hashBytes = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hashBytes);
        }

        // Method to test specific combinations
        public static void TestSpecificHash(string password, string salt, string expectedHash)
        {
            Console.WriteLine($"Testing: password='{password}', salt='{salt}'");

            var computed = GenerateHash_PasswordPlusSalt(password, salt);
            Console.WriteLine($"Computed: {computed}");
            Console.WriteLine($"Expected: {expectedHash}");
            Console.WriteLine($"Match: {computed == expectedHash}");
        }
    }
}